{"version":3,"sources":["history.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Logout","React","lazy","Login","ContainerLayout","App","history","Suspense","fallback","className","exact","path","name","render","props","Cookies","get","to","pathname","state","from","location","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAA,YAEeA,mB,2OCWTC,EAASC,IAAMC,MAAK,kBAAM,iCAC1BC,EAAQF,IAAMC,MAAK,kBAAM,uDACzBE,EAAkBH,IAAMC,MAAK,kBACjC,wDA+CaG,EA5CH,WAEV,OACE,kBAAC,IAAD,CAAQC,QAASA,KACf,kBAAC,IAAMC,SAAP,CAAgBC,SAbpB,yBAAKC,UAAU,oCAAf,eAcM,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,eACLC,KAAK,aACLC,OAAQ,SAAAC,GAAK,OAAI,kBAACX,EAAUW,MAE9B,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,gBACLC,KAAK,cACLC,OAAQ,SAAAC,GAAK,OAAI,kBAACd,EAAWc,MAE/B,kBAAC,IAAD,CACEH,KAAK,UACLC,KAAK,WACLC,OAAQ,SAAAC,GACN,OAAIC,IAAQC,IAAI,eACP,kBAACZ,EAAoBU,GAG1B,kBAAC,IAAD,CACEG,GAAI,CACFC,SAAU,eACVC,MAAO,CACLC,KAAMN,EAAMO,oBCrChBC,QACW,cAA7BC,OAAOF,SAASG,UAEe,UAA7BD,OAAOF,SAASG,UAEhBD,OAAOF,SAASG,SAASC,MACvB,2DCPNC,IAASb,OAEP,kBAAC,EAAD,MAEAc,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.645a0a7f.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React from \"react\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport history from \"./history\";\n\nimport \"./App.scss\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nimport Cookies from \"js-cookie\";\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n);\n\nconst Logout = React.lazy(() => import(\"./views/pages/Logout/Logout\"));\nconst Login = React.lazy(() => import(\"./views/pages/Login\"));\nconst ContainerLayout = React.lazy(() =>\n  import(\"./containers/DefaultLayout/DefaultLayout\")\n);\n\nconst App = () => {\n  // const { token } = useContext(UserContext);\n  return (\n    <Router history={history}>\n      <React.Suspense fallback={loading()}>\n        <Switch>\n          <Route\n            exact\n            path=\"/admin/login\"\n            name=\"Login Page\"\n            render={props => <Login {...props} />}\n          />\n          <Route\n            exact\n            path=\"/admin/logout\"\n            name=\"Logout Page\"\n            render={props => <Logout {...props} />}\n          />\n          <Route\n            path=\"/admin/\"\n            name=\"merchant\"\n            render={props => {\n              if (Cookies.get(\"admin_token\")) {\n                return <ContainerLayout {...props} />;\n              } else {\n                return (\n                  <Redirect\n                    to={{\n                      pathname: \"/admin/login\",\n                      state: {\n                        from: props.location\n                      }\n                    }}\n                  />\n                );\n              }\n            }}\n          />\n        </Switch>\n      </React.Suspense>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import { UserContextProvider } from \"./context\";\n\nReactDOM.render(\n  // <UserContextProvider>\n  <App />,\n  // </UserContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}